from typing import Optional, List
import os
import platform
import subprocess
import time
import webbrowser

import PySimpleGUI as sg

from view_intfc import RidenPSUListEntry
from model_control_intfc import RidenPSUModelControlIntfc

class RidenPSUView:
    """View for Riden RD60xx Remote Control"""

    # Icon (base-64 encoded)
    ICON = b''

    # From: https://github.com/PySimpleGUI/PySimpleGUI/blob/master/DemoPrograms/Demo_Button_Toggle_Simple_Graphic.py (base-64 encoded)
    TOGGLE_BTN_OFF = b'iVBORw0KGgoAAAANSUhEUgAAACgAAAAWCAYAAACyjt6wAAADmUlEQVRIx82XTWwbRRzF38zsh712Ysd2FsekSdxSUtJQNfQCJ46IA6rgRm8ghJAgVamqFDjlgAgtRRUNHECivZUDB6iExIEblyKh0lRJWpq2UZImtR1715/r9X4OB8pXcCLZXVDfcfTfp9/OrOa9JdhGb5z4SPVE8XBYFl/2wR/3PT/mul4UAUgQWIMyWiWgN62W9ZVD2KULM0eL7WbJ1oXJyXOyEyNTlPCTg+l+7BkZjCTivZAlEZIkBsEH23Zg2Q60cg3LqxvGen4T4GSGVfmZ2dmj1raAr07NZsIh/DDQnxx++tB4JBoJ4/9Q3TDx05V5I1/Ulx3Xfe6LD97O/Qvwtalzg5KMXw49uS++fzQrAkA4JEFN9CIWVSAKDADguB6qjSY29RrMlh0o6Pyvd9y5hSXdtMjE+dOT9/4EfH36c0XkzrWJsb3Z8X27GSEEw5kU1EQMhLQ34xwoaBWs5TRwzoOE9OYWb9+W6vbE2bPHTQoAgtt6J53se/QPuNHsAB5Jbg8HAIQA6VQcoyMDIDsNdqjx0T1MTcaGzIh4AgDIm+9+mvSZv/bS888qPVEF2UEVaqK3I9OCVsXKRjEwyFrDwLff/2hYgjtEHe68uCvdz3uiCpT731ynUhMxhENSYIC90Qgy6RQXLBymckg8kh3ORABATca6MiQEXb3YTsoOZaKSJB+h3ONjyb7YffLur5VYVAkUMJWIg3M+Rl3PjyvhEABAEoWuDSVJCBRQCcnwPC9JQTjh28XKQyDKGNObpgkAsBz3AeLLDRSsabbAmFCilJIberkGAKjWm10bVh7g2XYqlasgBDeo1XIuLq9u1AFgU6+hm1DgnKOo1wIFXF7dqNm2dZGKRPxmPV9k9UYTZstGQat0bJYvVWFaweVyrWEgV9CYK+MS/WzmLQ2cn7l8ZcHgHFjLaR0ddaXexN28Fhgc58Dln+cNzvHhl9PHdQoAnhg+lS/qd69dv2VzznFzJYeCVt3xuDkH8qUKllZygZaFucUlu6BVVkJN9+N2devqgSceix/cv1fYWrdk+feyalnOf1a3ri7echeu3ymbNg7+o25tLaxptW/kmacOKA9VYf175Xf7cIwB72XUfja0Kx1JJeLoiYTBGAsEyPM81A0TRa2MtfWCcW+z6PnA+yWqf/L19LS94z/JX7t5qkcQxBdCIfkV3+XjruumfM4DyTNKiCsIQokyMm+Z9gXHt787f/pkvd3sb5cdo2UxGXJ9AAAAAElFTkSuQmCC'
    TOGGLE_BTN_ON = b'iVBORw0KGgoAAAANSUhEUgAAACgAAAAWCAYAAACyjt6wAAADiUlEQVRIx82XS28bVRzFz713HnZm/IjtdBG/SltVqFDSkC/ACkqlEiWLSnTHB0BiUYXHKouKQFWEEB+AXVlEapSCWiFYVGJdpxCJFuS0yXgCUuz4PZ2H597LwoBK8xCxRqj/5WjO6Kf/uXPmDMEBM7f43THu81lVZ29LjtMSMsU5NxHBUEr7lNAOQH7lfPB1IMnqnaUL9f3uJc9eePPd27qeogsA3s9kxjExkTMM04CqKFAUJQo+hGGIQRjC6Tuo79SdZqsNCbEUdHD9zpcX/AMB31pYnWS6/n0qnSqfOnHC0GM6/o/xPA8bG4+dTrf7iITyjZsfn/9jD+D8wu2C1EmlXC6n8/lJNUqAnMlwtqCinFNgaBQA4AQCW40QP9sBdvsCALBt2+GWZTe570/fujb7+z+AFxe/GVOF+lOxVHqhkJ9kUYExCrz2YhznihoI2f8eKYE1K8Ddhy6EBGx7m1u1WlXpdaeXP7/kUgBgIfsgmUzmo4abnzEwXToYDgAIAV4ta5ifMcAokM/nWSKRKA2M5BUAIHMf3sxKFrdmZqbHYrFYZLa+/lIcrxS1I2nuWwF++MWF67qoVO47qkJKVBB9bjyTkVHC5RIMZwvakXVTRQ1ZkyIej2N8PC0Dn89SpiiXj01kjShfiqni4bYeZvfUX1ufyOVMpiiXqZTyjGGYkcZGKTN6XpayQ62ZMCEJzlAhRFrTtEgBk3EyujY2jCFN0yA4z1JCQPAcD6WENoPAj/ShXVeOrvWGoe37PhhTGhSEPHAcJ1LAzcZgZO3jejj80vQdQMoHlIfhjZ2dei9KwHV7ADnCEoUE1u0AALBTb3R5GN6gVPorrVabeZ4XGWCjz7FmHf3Y3Nv00XQEXNdFu9Vmms5W6crS/K4k5Hq1+siRMrot3n3oYbMR/ndrGyF+/M2DlEC1uuEA+GR58XyTAoBgg0+7vU7NtmtBVIBCAisVB2tWcKjdUgKVrQAr9xwICdRqVtDr9TfVJ73P9tQtoZO1UqGQLpaKSpRn8u+6dTynIjU2zLn2E76nbtUsK6zVtls8CM79q249W1jTyeTxk6dOjj1XhfXpyq+l6HuUko/S6TTLZTOGaRqIxWKglEZjvxDwPA+9Xh+7u02n3WlzCHlVUXpfLC9eCg79J3lqmwmiKBcVVXlHSPmy4DwnJSKxnhCElLEGoWR9MAi/IoPw21vXZveNuj8Bl0OXZceTF7EAAAAASUVORK5CYII='

    # Font to use
    FONT = "Arial"

    # Number of info screens
    INFO_COUNT = 3

    # Period to toggle between info screens
    INFO_PERIOD = 2.0 # secs

    # Define colours
    RIDEN_GREEN = "#57FF00"
    RIDEN_BLUE_LIGHT = "#00FFFF"
    RIDEN_PINK = "#EC65FF"
    RIDEN_YELLOW = "#FFFA7C"
    RIDEN_BLUE_DARK = "#0043F4"
    RIDEN_RED = "#FF0000"
    RIDEN_GREY = "#808080"

    # Define characters
    CHECK_MARK = u"\u2713"
    BATTERY = "B" # Could use emoji u"\U0001F50B" (but this fails on Ubuntu 20.04 due to an xserver related error)

    # Voltage format strings
    VOLTAGE_FORMAT = {}

    # Current format strings
    CURRENT_FORMAT = {
        6006 : "%05.3f"
    }

    # Power format strings
    POWER_FORMAT = {}

    def __init__(self, no_config_file:bool=False, config_file_path:str="") -> None:
        """Constructor"""

        # Store args
        self._no_config_file = no_config_file
        self._config_file_path = config_file_path

        # Preview themes
        if 0:
            sg.theme_previewer()

        # Set theme
        sg.theme('Black')

        # Prepare window layout
        layout = [
            [self._create_menu()],
            [self._create_psu_select_update_enable()],
            [self._create_separator("sep_top")],
            [self._create_main_status()],
            [self._create_separator("sep_middle")],
            [self._create_status_bar()],
            [self._create_separator("sep_bottom")],
            [self._create_buttons()],
        ]

        # Reset connected state
        self._connected = False

        # Reset PSU identity
        self._psu_identity = ""

        # Reset PSU model
        self._psu_model = 60061 # Assume 6006 mk 1 at startup

        # Reset info index to display
        self._info_index = 0

        # Create the Window
        self._window = sg.Window("Riden RD60xx MQTT Remote Control", layout, margins=(0, 0), icon=self.ICON, finalize=True)

        # Finish theming combobox
        self._fix_psu_select_colors()

        # Prepare styles, to set horizontal separator colors
        # From: https://github.com/PySimpleGUI/PySimpleGUI/issues/3025
        style = sg.ttk.Style()
        style.theme_use(self._window.TtkTheme)
        style.configure("sep_disabled" + "Line.TSeparator", background=self.RIDEN_GREY)

        style = sg.ttk.Style()
        style.theme_use(self._window.TtkTheme)
        style.configure("sep_enabled" + "Line.TSeparator", background=self.RIDEN_YELLOW)

        # Disable all controls
        self._set_connected_colors_status()

        # Reset model/controller
        self._model_ctrl = None

    def set_model_controller(self, model_ctrl:RidenPSUModelControlIntfc):
        """Update model / controller for view"""

        self._model_ctrl = model_ctrl

    def run(self) -> None:
        """Run window event loop"""

        if self._no_config_file:
            # Display popup requesting user provide settings
            self._open_config_file()
            sg.popup_ok("Looks like this might be our first rodeo :-).\n",
                        "I need a few settings to connect to your MQTT broker.\n"
                        "I've prepared an example config file here:\n",
                        f"{self._config_file_path}\n",
                        "Hopefully it's now open in your platform's default text editor.\n\n"
                        "Once done editing, restart me to apply it and get connected!",
                        title="First run",
                        font=(self.FONT, 12))

        # Reset last info cycle period and index
        last_info_time = time.monotonic()

        while True:
            # Calculate timeout (in ms)
            read_timeout = int(max(self.INFO_PERIOD - (time.monotonic() - last_info_time), 0) * 1000)

            # Read events from window
            event, values = self._window.read(timeout=read_timeout)

            if event in (sg.WIN_CLOSED, 'Exit'):
                # Exit application
                break

            # Handle field updates
            elif event == "set_psus":
                self._update_psus(values["set_psus"])

            elif event == "set_connected":
                self._connected = values["set_connected"]
                self._set_connected_colors_status()

            elif event == "set_update_state":
                # Store new flag
                element = self._window["update_enable"]
                element.metadata = values['set_update_state']
                self._window["update_enable"].update(data=self.TOGGLE_BTN_ON if element.metadata else self.TOGGLE_BTN_OFF)

            elif event == "set_input_voltage":
                self._window["input_voltage_value"].update(self._format_voltage(values['set_input_voltage']))

            elif event == "set_output_voltage_set":
                self._window["voltage_set_value"].update(self._format_voltage(values['set_output_voltage_set']))

            elif event == "set_output_current_set":
                self._window["current_set_value"].update(self._format_current(values['set_output_current_set']))

            elif event == "set_ovp":
                self._window["ovp_set_value"].update(self._format_voltage(values['set_ovp']))

            elif event == "set_ocp":
                self._window["ocp_set_value"].update(self._format_current(values['set_ocp']))

            elif event == "set_output_voltage_disp":
                self._window["voltage_disp"].update(self._format_voltage(values['set_output_voltage_disp']))

            elif event == "set_output_current_disp":
                self._window["current_disp"].update(self._format_current(values['set_output_current_disp']))

            elif event == "set_output_power_disp":
                self._window["power_disp"].update(self._format_power(values['set_output_power_disp']))

            elif event == "set_cc_cv":
                self._window["cv_cc"].metadata = values['set_cc_cv']
                self._window["cv_cc"].update("CC" if values['set_cc_cv'] else "CV")
                self._set_status_bar_colors()

            elif event == "set_ovp_ocp":
                status = values['set_ovp_ocp']
                if status == "normal":
                    text = self.CHECK_MARK
                elif status == "ovp":
                    text = "OVP"
                elif status == "ocp":
                    text = "OCP"
                else:
                    text = "?"
                self._window["ovp_ocp"].metadata = (status != "normal")
                self._window["ovp_ocp"].update(value=text)
                self._set_status_bar_colors()

            elif event == "set_batt_state":
                # Set background color, stashing it in metadata for enable / disable
                self._window["batt"].metadata = values['set_batt_state']
                self._set_status_bar_colors()

            elif event == "set_temp":
                self._update_info(values['set_temp'], None, None)

            elif event == "set_batt_ah":
                self._update_info(None, values['set_batt_ah'], None)

            elif event == "set_batt_wh":
                self._update_info(None, None, values['set_batt_wh'])

            elif event == "set_output_enabled":
                self._set_button_status(values['set_output_enabled'])

            elif event == "psu_selector":
                # When new item is selected, clear selection to de-select text
                self._window["psu_selector"].Widget.selection_clear()

                # Pass to model
                self._set_psu(values["psu_selector"])

            elif event == "update_enable" and self._connected:
                # Pass to model
                if self._model_ctrl is not None:
                    # Retrieve element
                    element = self._window["update_enable"]

                    # Send inverted state
                    self._model_ctrl.set_update(not element.metadata)

            elif event in ["voltage_set_title", "voltage_set_value"] and self._connected:
                # Request and set value
                max_voltage = (self._psu_model // 10) // 100
                new_value = self._prompt_for_value("Set Voltage", f"Enter new voltage (0 -> {max_voltage}V)", max=max_voltage)
                if new_value is not None and self._model_ctrl is not None:
                    self._model_ctrl.set_voltage(new_value)

            elif event in ["current_set_title", "current_set_value"] and self._connected:
                # Request and set value
                max_current = (self._psu_model // 10) % 1000
                new_value = self._prompt_for_value("Set Current", f"Enter new current (0 -> {max_current}A)", max=max_current)
                if new_value is not None and self._model_ctrl is not None:
                    self._model_ctrl.set_current(new_value)

            elif event in ["ovp_set_title", "ovp_set_value"] and self._connected:
                # Request and set value
                max_voltage = (self._psu_model // 10) // 100
                new_value = self._prompt_for_value("Set OVP", f"Enter new over-voltage protection limit (0 -> {max_voltage}V)", max=max_voltage)
                if new_value is not None and self._model_ctrl is not None:
                    self._model_ctrl.set_ovp(new_value)

            elif event in ["ocp_set_title", "ocp_set_value"] and self._connected:
                # Request and set value
                max_current = (self._psu_model // 10) % 1000
                new_value = self._prompt_for_value("Set OCP", f"Enter new over-current protection limit (0 -> {max_current}A)", max=max_current)
                if new_value is not None and self._model_ctrl is not None:
                    self._model_ctrl.set_ocp(new_value)

            elif event == "preset" and self._connected:
                # Request and set value
                new_value = self._prompt_for_value("Select preset ", "Enter new preset index (1 -> 9)", integer=True, min=1, max=9)
                if new_value is not None and self._model_ctrl is not None:
                    self._model_ctrl.set_preset(new_value)

            elif event == "output_enable" and self._connected:
                # Pass to model
                if self._model_ctrl is not None:
                    # Toggle output
                    self._model_ctrl.toggle_output_enable()

            elif event == "Open Config File":
                # "Preferences" -> "Open Config File" menu entry
                self._open_config_file()

            elif event == "About...":
                # "Help" -> "About..." menu entry
                layout = [
                    [sg.Text("RD60xx MQTT Remote Control attempts to mimmock the GUI\nof the RuiDeng Riden RD6000 family of benchtop power supplies.",
                             font=(self.FONT, 12))],
                    [sg.Text("It expects to connect to a companion daemon via MQTT,\nwhich in turn communicates with the power supply to monitor/control.",
                             font=(self.FONT, 12))],
                    [sg.Text("For more information see: www.quantulum.co.uk\n\nOr smash the \"To the Blog\" button below.",
                             font=(self.FONT, 12))],
                    [sg.Push(), sg.Button('To the Blog!', key="blog"), sg.Button('OK')],
                ]
                event, values = sg.Window('About', layout, modal=True).read(close=True)
                if event == "blog":
                    webbrowser.open_new_tab("https://www.quantulum.co.uk")

            elif event == sg.TIMEOUT_KEY:
                # Read has timed out, select next info screen
                self._set_info_visible(cycle=True)

                # Update last time
                last_info_time = time.monotonic()

        # Close window before quitting
        self._window.close()

    # Interface implementation, passing requests to GUI thread for processing
    def set_psus(self, psus:List[RidenPSUListEntry]):
        """Set PSU list box entries"""
        self._window.write_event_value("set_psus", psus)

    def set_connected(self, connected:bool):
        """Set display to indicate that PSU is connected"""
        self._window.write_event_value("set_connected", connected)

    def set_update_state(self, enabled:bool):
        """Set auto-update state"""
        self._window.write_event_value("set_update_state", enabled)

    def set_input_voltage(self, value:float):
        """Set input voltage display element"""
        self._window.write_event_value("set_input_voltage", value)

    def set_output_voltage_set(self, value:float):
        """Set output voltage set display element"""
        self._window.write_event_value("set_output_voltage_set", value)

    def set_output_current_set(self, value:float):
        """Set output current set display element"""
        self._window.write_event_value("set_output_current_set", value)

    def set_ovp(self, value:float):
        """Set over voltage protection display element"""
        self._window.write_event_value("set_ovp", value)

    def set_ocp(self, value:float):
        """Set over current protection display element"""
        self._window.write_event_value("set_ocp", value)

    def set_output_voltage_disp(self, value:float):
        """Set output voltage disp display element"""
        self._window.write_event_value("set_output_voltage_disp", value)

    def set_output_current_disp(self, value:float):
        """Set output current disp display element"""
        self._window.write_event_value("set_output_current_disp", value)

    def set_output_power_disp(self, value:float):
        """Set output power disp display element"""
        self._window.write_event_value("set_output_power_disp", value)

    def set_cc_cv(self, cc:bool):
        """Set output state"""
        self._window.write_event_value("set_cc_cv", cc)

    def set_ovp_ocp(self, status:str):
        """Set output protection state"""
        self._window.write_event_value("set_ovp_ocp", status)

    def set_batt_state(self, batt_present:bool):
        """Set battery connection state"""
        self._window.write_event_value("set_batt_state", batt_present)

    def set_temp(self, value:float):
        """Set temperature"""
        self._window.write_event_value("set_temp", value)

    def set_batt_ah(self, value:float):
        """Set battery amp-hours"""
        self._window.write_event_value("set_batt_ah", value)

    def set_batt_wh(self, value:float):
        """Set battery watt-hours"""
        self._window.write_event_value("set_batt_wh", value)

    def set_output_enabled(self, enabled:bool):
        """Set output enabled status"""
        self._window.write_event_value("set_output_enabled", enabled)

    def _open_config_file(self) -> None:
        """Attempt to open config file in platform's default text editor"""

        # From: https://stackoverflow.com/questions/434597/open-document-with-default-os-application-in-python-both-in-windows-and-mac-os
        if platform.system() == 'Darwin':
            # macOS
            subprocess.call(('open', self._config_file_path))

        elif platform.system() == 'Windows':
            # Windows
            os.startfile(self._config_file_path)
        else:
            # Linux and friends
            subprocess.call(('xdg-open', self._config_file_path))

    def _set_psu(self, psu:RidenPSUListEntry) -> None:
        """Select PSU"""

        # Store PSU identity
        self._psu_identity = psu.identity

        # Store PSU model number
        self._psu_model = psu.model

        # Inform model
        if self._model_ctrl is not None:
            self._model_ctrl.set_psu(psu.identity)

    def _format_voltage(self, val:float) -> str:
        """Format value according to PSU model"""

        # Remove hardware revision
        model = self._psu_model // 10

        # Lookup format
        fmt = self.VOLTAGE_FORMAT.get(model, "%05.2f")

        return (fmt + "V") % val

    def _format_current(self, val:float) -> str:
        """Format value according to PSU model"""

        # Remove hardware revision
        model = self._psu_model // 10

        # Lookup format
        fmt = self.CURRENT_FORMAT.get(model, "%05.2f")

        return (fmt + "A") % val

    def _format_power(self, val:float) -> str:
        """Format value according to PSU model"""

        # Remove hardware revision
        model = self._psu_model // 10

        # Lookup format
        fmt = self.POWER_FORMAT.get(model, "%05.2f")

        return (fmt + "W") % val

    def _create_separator(self, key) -> sg.Element:
        """Create horizontal separator"""

        return sg.HorizontalSeparator(color=self.RIDEN_GREY, pad=(0, 0), key=key)

    def _create_menu(self) -> sg.Element:
        """Create menu bar"""

        # Define menu entries
        entries = [
            ['&File', ['E&xit']],
            ['&Preferences', ['&Open Config File']],
            ['&Help', ['&About...']]
        ]

        # Select font
        if platform.system() == 'Darwin':
            # Need to specify a font for MacOS, else the menu looks ugly-as
            menu_font = ("Lucida\ Grande", 13)
        elif platform.system() == 'Linux':
            # Linux seems to look ok using the same font as most everything else here
            menu_font = (self.FONT, 12)
        else:
            # No special treatment required
            menu_font = None

        # Construct menu
        return sg.Menu(entries, font=menu_font)

    def _create_psu_select_update_enable(self) -> sg.Element:
        """Create PSU selection dropdown"""

        psu_selector_title = sg.Text("PSU:", pad=(0, 0), font=(self.FONT, 12, "bold"))
        psu_selector = sg.Combo([], pad=(0, 0), font=(self.FONT, 12, "bold"), background_color="black", text_color="white", readonly=True, expand_x=True, key="psu_selector", enable_events=True, metadata=[])
        frame_psu = sg.Frame("", layout=[[psu_selector_title, psu_selector]], pad=(0, 0), border_width=0, expand_x=True)

        update_enable_title = sg.Text("Update:", pad=(0, 0), font=(self.FONT, 12, "bold"))
        update_enable_btn = sg.Image(data=self.TOGGLE_BTN_OFF, enable_events=True, metadata=False, pad=(0, 0), key="update_enable")
        frame_update = sg.Frame("", layout=[[update_enable_title, update_enable_btn]], pad=(0, 0), border_width=0)

        frame = sg.Frame("", layout=[[frame_psu, frame_update]], pad=(0, 0), border_width=0, expand_x=True)

        return frame

    def _fix_psu_select_colors(self) -> None:
        """Fix combobox colors"""

        # From: https://github.com/PySimpleGUI/PySimpleGUI/issues/5424
        psu_selector = self._window["psu_selector"].Widget
        psu_selector.tk.eval('[ttk::combobox::PopdownWindow %s].f.l configure -foreground white -background black -selectforeground white -selectbackground black' % psu_selector)

    def _create_main_status(self) -> sg.Element:
        """Create main status area"""

        voltage_disp = sg.Text("00.00V", size=(6, 1), pad=(0, 0), font=(self.FONT, 50, "bold"), text_color=self.RIDEN_GREY, key="voltage_disp")
        current_disp = sg.Text("0.000A", size=(6, 1), pad=(0, 0), font=(self.FONT, 50, "bold"), text_color=self.RIDEN_GREY, key="current_disp")
        power_disp = sg.Text("00.00W", size=(6, 1), pad=(0, 0), font=(self.FONT, 50, "bold"), text_color=self.RIDEN_GREY, key="power_disp")

        col_left = sg.Column([[voltage_disp], [current_disp], [power_disp]])

        input_voltage_title = sg.Frame('', layout=[[
                                                    sg.Text("INPUT", size=(5, 1), pad=(0, 0), font=(self.FONT, 15, "bold"), text_color=self.RIDEN_GREY, justification="center", key="input_voltage_title")
                                                ]], relief=sg.RELIEF_FLAT, border_width=2, background_color=self.RIDEN_GREY, pad=(0, 0), key="input_voltage_title_border")
        input_voltage_value = sg.Text("00.00V", size=(6, 1), pad=(0, 0), font=(self.FONT, 25, "bold"), text_color=self.RIDEN_GREY, key="input_voltage_value")
        input_voltage_frame = sg.Frame('', layout=[[input_voltage_title, input_voltage_value],], border_width=0, pad=(0, (0, 10)))

        voltage_set_title = sg.Frame('', layout=[[
                                                    sg.Text("V-SET", size=(5, 1), pad=(0, 0), font=(self.FONT, 15, "bold"), text_color=self.RIDEN_GREY, justification="center", enable_events=True, key="voltage_set_title")
                                                ]], relief=sg.RELIEF_FLAT, border_width=2, background_color=self.RIDEN_GREY, pad=(0, 0), key="voltage_set_title_border")
        voltage_set_value = sg.Text("00.00V", size=(6, 1), pad=(0, 0), font=(self.FONT, 25, "bold"), text_color=self.RIDEN_GREY, enable_events=True, key="voltage_set_value")

        current_set_title = sg.Frame('', layout=[[
                                                    sg.Text("I-SET", size=(5, 1), pad=(0, 0), font=(self.FONT, 15, "bold"), text_color=self.RIDEN_GREY, justification="center", enable_events=True, key="current_set_title")
                                                ]], relief=sg.RELIEF_FLAT, border_width=2, background_color=self.RIDEN_GREY, pad=(0, 0), key="current_set_title_border")
        current_set_value = sg.Text("0.000A", size=(6, 1), pad=(0, 0), font=(self.FONT, 25, "bold"), text_color=self.RIDEN_GREY, enable_events=True, key="current_set_value")

        volt_curr_set_frame = sg.Frame('', layout=[ [voltage_set_title, voltage_set_value],
                                                    [current_set_title, current_set_value]
                                                ], border_width=0, pad=(0, (0, 10)))

        ovp_set_title = sg.Frame('', layout=[[
                                                sg.Text("OVP", size=(5, 1), pad=(0, 0), font=(self.FONT, 15, "bold"), text_color=self.RIDEN_GREY, justification="center", enable_events=True, key="ovp_set_title")
                                            ]], relief=sg.RELIEF_FLAT, border_width=2, background_color=self.RIDEN_GREY, pad=(0, 0),
                                            key="ovp_set_title_border")
        ovp_set_value = sg.Text("00.00V", size=(6, 1), pad=(0, 0), font=(self.FONT, 25, "bold"), text_color=self.RIDEN_GREY, enable_events=True, key="ovp_set_value")

        ocp_set_title = sg.Frame('', layout=[[
                                                sg.Text("OCP", size=(5, 1), pad=(0, 0), font=(self.FONT, 15, "bold"), text_color=self.RIDEN_GREY, justification="center", enable_events=True, key="ocp_set_title")
                                            ]], relief=sg.RELIEF_FLAT, border_width=2, background_color=self.RIDEN_GREY, pad=(0, 0),
                                            key="ocp_set_title_border")
        ocp_set_value = sg.Text("0.000A", size=(6, 1), pad=(0, 0), font=(self.FONT, 25, "bold"), text_color=self.RIDEN_GREY, enable_events=True, key="ocp_set_value")

        ocp_ovp_set_frame = sg.Frame('', layout=[ [ovp_set_title, ovp_set_value],
                                                  [ocp_set_title, ocp_set_value]
                                                ], border_width=0, pad=(0, 0))

        col_right = sg.Column([ [input_voltage_frame],
                                [volt_curr_set_frame],
                                [ocp_ovp_set_frame],
                              ], vertical_alignment="top")

        frame = sg.Frame("", [[col_left, col_right]], border_width=0, pad=(0, 0))

        return frame

    def _create_status_bar(self) -> sg.Element:
        """Create status bar row"""

        preset = sg.Text("Mx", size=(2, 1), pad=(2, 0), font=(self.FONT, 20, "bold"), text_color="white", background_color=self.RIDEN_GREY, justification="center", enable_events=True, key="preset")
        cv_cc = sg.Text("CV", size=(2, 1), pad=(2, 0), font=(self.FONT, 20, "bold"), text_color="white", background_color=self.RIDEN_GREY, justification="center", key="cv_cc", metadata=False)
        ovp_ocp = sg.Text(self.CHECK_MARK, size=(3, 1), pad=(2, 0), font=(self.FONT, 20, "bold"), text_color="white", background_color=self.RIDEN_GREY, justification="center", key="ovp_ocp", metadata=False)
        batt = sg.Text(self.BATTERY, size=(3, 1), pad=(2, 0), font=(self.FONT, 20, "bold"), text_color="white", background_color=self.RIDEN_GREY, justification="center", key="batt", metadata=False)
        info_text = sg.Text("00°C", auto_size_text=True, pad=(2, 0), font=(self.FONT, 20, "bold"), text_color=self.RIDEN_GREY, justification="right", expand_x=True, key="info_text", metadata=("00°C", "000.000Ah", "000.000Wh"))

        frame = sg.Frame("", layout=[[preset, cv_cc, ovp_ocp, batt, info_text]], border_width=0, pad=(0, 5), expand_x=True)

        return frame

    def _set_info_visible(self, cycle:bool=False) -> None:
        """Cycle between different infomation in status panel"""

        # Cycle index if required
        if cycle:
            self._info_index = (self._info_index + 1) % self.INFO_COUNT

        # Retrieve element
        info_text = self._window["info_text"]

        # Extract and split metadata
        temp, batt_ah, batt_wh = info_text.metadata

        # Act on index, selecting text and updating color
        if self._info_index == 0:
            text = temp
            color = self.RIDEN_GREEN
        elif self._info_index == 1:
            text = batt_ah
            color = self.RIDEN_GREEN
        elif self._info_index == 2:
            text = batt_wh
            color = self.RIDEN_YELLOW

        # If disabled, reset color
        if not self._connected:
            color = self.RIDEN_GREY

        # Update element
        info_text.update(value=text, text_color=color)

    def _update_info(self, new_temp:Optional[float], new_batt_ah:Optional[float], new_batt_wh:Optional[float]) -> None:
        """Update info field(s)"""

        # Retrieve element
        info_text = self._window["info_text"]

        # Get element metadata
        temp, batt_ah, batt_wh = info_text.metadata

        # Update fields
        if new_temp is not None:
            temp = f"{new_temp:02d}°C"
        if new_batt_ah is not None:
            batt_ah = f"{new_batt_ah:07.3f}Ah"
        if new_batt_wh is not None:
            batt_wh = f"{new_batt_wh:07.3f}Wh"

        # Set element metadata
        info_text.metadata = (temp, batt_ah, batt_wh)

    def _set_status_bar_colors(self) -> None:
        """Update status bar colors"""

        if not self._connected:
            for key in ["preset", "cv_cc", "ovp_ocp", "batt"]:
                self._window[key].update(background_color=self.RIDEN_GREY)

        else:
            self._window["preset"].update(background_color=self.RIDEN_BLUE_DARK)
            for key in ["cv_cc", "ovp_ocp", "batt"]:
                elem = self._window[key]
                elem.update(background_color=self.RIDEN_RED if elem.metadata else self.RIDEN_BLUE_DARK)

    def _create_buttons(self) -> sg.Element:
        """Create buttons"""

        output_enable_title = sg.Text("Output Control", pad=(0, 0), font=(self.FONT, 12, "bold"))
        output_enable_btn_color = ("white", self.RIDEN_GREY)
        output_enable_btn = sg.Button("On/Off", button_color=output_enable_btn_color, key="output_enable", pad=(0, 0), use_ttk_buttons=True,  metadata=False)
        frame_enable = sg.Frame("", layout=[[output_enable_title, output_enable_btn]], pad=(5, 0), border_width=0, element_justification="right", expand_x=True)

        frame = sg.Frame("", layout=[[frame_enable]], pad=(0, 5), border_width=0, expand_x=True)

        return frame

    def _set_button_status(self, output_enabled:bool) -> None:
        """Update indicated button status"""

        # Retrieve elemnt
        element = self._window["output_enable"]

        # Update metadata
        element.metadata = output_enabled

        # Set colours
        self._set_button_colors_status()

    def _set_button_colors_status(self) -> None:
        """Update button colors"""

        # Retrieve elemnt
        element = self._window["output_enable"]

        # Decide on colours
        output_disabled_btn_color = ("white", self.RIDEN_GREY)
        output_enabled_btn_color = ("white", self.RIDEN_GREEN)

        if not self._connected:
            # Force disabled colour
            output_enable_color = output_disabled_btn_color
        else:
            # Select colour based on metadata
            output_enable_color = output_enabled_btn_color if element.metadata else output_disabled_btn_color

        # Update colors
        element.update(button_color=output_enable_color)

        # Update mouseover colors
        # From: https://stackoverflow.com/questions/70510740/how-to-update-button-mouseover-color-in-pysimplegui-tkinter-port
        style_name = element.Widget.configure()["style"][-1]
        style = sg.ttk.Style()
        style.map(style_name, foreground=[('active', output_enable_color[0])], background=[('active', output_enable_color[1])])

        # Set button disabled state based on connected flag
        element.update(disabled=not self._connected)

    def _update_psus(self, new_psus:List[RidenPSUListEntry]) -> None:
        """Update PSU list, merging in new entries"""

        # Retrieve element
        psu_selector = self._window["psu_selector"]

        # Retrieve old list
        old_psus:List[RidenPSUListEntry] = psu_selector.metadata

        # Convert lists to dictionaries
        old_psus = {x.identity : x for x in old_psus}
        new_psus = {x.identity : x for x in new_psus}

        # Update old PSU list with new PSUs, using dictionary to ensure keys are unique, sorting by name
        combined_psus = old_psus.copy()
        combined_psus.update(new_psus)
        combined_psus = list(combined_psus.values())
        combined_psus.sort(key=lambda x: str(x))

        # If no PSU selected, select first PSU from new list
        curr_selection = psu_selector.get()
        if curr_selection == "":
            # Select first PSU from combined list (which is sorted) that's also in new list (as it should be connected)
            selected_psu = None
            for x in combined_psus:
                if x.identity in new_psus:
                    selected_psu = x
                    break

            if selected_psu is not None:
                # Update PSU selection
                self._set_psu(selected_psu)

                # Render as string for combobox
                curr_selection = str(selected_psu)

        else:
            # Lookup PSU based on its identity (in case its name has changed)
            if self._psu_identity in new_psus:
                curr_selection = str(new_psus[self._psu_identity])

        # Update list
        psu_selector.metadata = combined_psus
        psu_selector.update(values=combined_psus, value=curr_selection)

    def _set_connected_colors_status(self) -> None:
        """Update colors and values as PSU is reported as connected / disconnected"""

        # Grab connected flag
        connected = self._connected

        # Update elements
        self._window["voltage_disp"].update(text_color=self.RIDEN_GREEN if connected else self.RIDEN_GREY)
        self._window["current_disp"].update(text_color=self.RIDEN_BLUE_LIGHT if connected else self.RIDEN_GREY)
        self._window["power_disp"].update(text_color=self.RIDEN_PINK if connected else self.RIDEN_GREY)
        self._window["input_voltage_title"].update(text_color=self.RIDEN_PINK if connected else self.RIDEN_GREY)
        self._window["input_voltage_title_border"].Widget.config(background=self.RIDEN_PINK if connected else self.RIDEN_GREY)
        self._window["input_voltage_value"].update(text_color=self.RIDEN_PINK if connected else self.RIDEN_GREY)
        self._window["voltage_set_title"].update(text_color=self.RIDEN_YELLOW if connected else self.RIDEN_GREY)
        self._window["voltage_set_title_border"].Widget.config(background=self.RIDEN_YELLOW if connected else self.RIDEN_GREY)
        self._window["voltage_set_value"].update(text_color=self.RIDEN_YELLOW if connected else self.RIDEN_GREY)
        self._window["current_set_title"].update(text_color=self.RIDEN_YELLOW if connected else self.RIDEN_GREY)
        self._window["current_set_title_border"].Widget.config(background=self.RIDEN_YELLOW if connected else self.RIDEN_GREY)
        self._window["current_set_value"].update(text_color=self.RIDEN_YELLOW if connected else self.RIDEN_GREY)
        self._window["ovp_set_title"].update(text_color=self.RIDEN_BLUE_LIGHT if connected else self.RIDEN_GREY)
        self._window["ovp_set_title_border"].Widget.config(background=self.RIDEN_BLUE_LIGHT if connected else self.RIDEN_GREY)
        self._window["ovp_set_value"].update(text_color=self.RIDEN_BLUE_LIGHT if connected else self.RIDEN_GREY)
        self._window["ocp_set_title"].update(text_color=self.RIDEN_BLUE_LIGHT if connected else self.RIDEN_GREY)
        self._window["ocp_set_title_border"].Widget.config(background=self.RIDEN_BLUE_LIGHT if connected else self.RIDEN_GREY)
        self._window["ocp_set_value"].update(text_color=self.RIDEN_BLUE_LIGHT if connected else self.RIDEN_GREY)
        self._window["sep_top"].Widget.config(style=("sep_enabled" if connected else "sep_disabled") + "Line.TSeparator")
        self._window["sep_middle"].Widget.config(style=("sep_enabled" if connected else "sep_disabled") + "Line.TSeparator")
        self._window["sep_bottom"].Widget.config(style=("sep_enabled" if connected else "sep_disabled") + "Line.TSeparator")
        self._set_info_visible()
        self._set_status_bar_colors()
        self._set_button_colors_status()

    def _prompt_for_value(self, title:str, prompt:str, integer:bool=False, min:float=None, max:float=None) -> float:
        """Request value from user, converting from string to float"""

        # Prompt user
        new_value = sg.popup_get_text(prompt, title=title, font=(self.FONT, 12, "bold"))

        # Convert value
        if new_value is not None:
            try:
                if integer:
                    new_value = int(new_value)
                else:
                    new_value = float(new_value)

            except ValueError:
                sg.popup_quick_message("Please enter a valid number!", font=(self.FONT, 12, "bold"), background_color=self.RIDEN_RED, text_color="black", title="Error", auto_close_duration=3)
                new_value = None

        # Check value
        if new_value is not None:
            if min is not None and new_value < min:
                sg.popup_quick_message(f"Please enter number >= {min}!", font=(self.FONT, 12, "bold"), background_color=self.RIDEN_RED, text_color="black", title="Error", auto_close_duration=3)
                new_value = None

        if new_value is not None:
            if max is not None and new_value > max:
                sg.popup_quick_message(f"Please enter number <= {max}!", font=(self.FONT, 12, "bold"), background_color=self.RIDEN_RED, text_color="black", title="Error", auto_close_duration=3)
                new_value = None

        return new_value
